<%
  user_choice_type = nil
  if my_choice_ids.length > 0
    user_choice_type = :voiced
    if my_choice_ids[0] == question.pass_choice_id
      user_choice_type = :passed
    end
  end
%>

<% question_choices = question.choices %>

<!-- TODO: find a way to reshuffle only on refresh and
  possibly collapse/expand, but NOT after voicing, as this
  is jarring -->
<% # question_choices = question.choices.shuffle if question.randomize %>

<% question_choices.each do |choice| %>

  <% next if choice.ordinality == 0 %>

  <% my_choice_class = 'open-choice' %>
  <% my_choice_class = 'my-choice' if my_choice_ids.include? choice.id %>
  
  <form action="/voices" class="panel-body list-group-item <%=my_choice_class%>" method="post" data-remote="true">
    <div class="text-stripe">
      <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
      <%= hidden_field_tag "voice[choice_id]", choice.id %>
      <%= hidden_field_tag "panel_num_word", num_word %>
      <input type="submit" class="choice-button" <%= 'disabled' if user_choice_type == :passed %> value="<%= choice.text %>" />

      <!-- perhaps use a div with span-ish CSS instead -->
      <div class="<%= 'hidden' unless user_choice_type == :voiced %> voice-count-pane">
        <!-- NOT_A_FEATURE: this triggers a COUNT query per choice,
          which is 15-35 querys per page. 
          TODO: make sure the backend is preloading
          all voice counts per question,
          or perhaps better yet all voice counts
          on the page, with one COUNT GROUP BY.
        -->
        <%= choice.voices_count %>
      </div>
    </div>

  </form>

<% end %>